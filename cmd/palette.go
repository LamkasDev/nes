package main

import "github.com/veandco/go-sdl2/sdl"

const NesNametableFirst = 0x03c0
const NesNametableTilesWidth = 32
const NesNametableTilesHeight = 32
const NesAttributeQuadrantTiles = 4
const NesTileWidth = 8
const NesTileHeight = 8
const NesTileSize = 16
const NesSpritePalleteStart = (NesAttributeQuadrantTiles * 4) + 1
const NesPalleteSize = 64

var NesPPUPallete = ConvertPalleteToUint32([NesPalleteSize]sdl.Color{
	{0x80, 0x80, 0x80, 0xff}, {0x00, 0x3D, 0xA6, 0xff}, {0x00, 0x12, 0xB0, 0xff}, {0x44, 0x00, 0x96, 0xff}, {0xA1, 0x00, 0x5E, 0xff},
	{0xC7, 0x00, 0x28, 0xff}, {0xBA, 0x06, 0x00, 0xff}, {0x8C, 0x17, 0x00, 0xff}, {0x5C, 0x2F, 0x00, 0xff}, {0x10, 0x45, 0x00, 0xff},
	{0x05, 0x4A, 0x00, 0xff}, {0x00, 0x47, 0x2E, 0xff}, {0x00, 0x41, 0x66, 0xff}, {0x00, 0x00, 0x00, 0xff}, {0x05, 0x05, 0x05, 0xff},
	{0x05, 0x05, 0x05, 0xff}, {0xC7, 0xC7, 0xC7, 0xff}, {0x00, 0x77, 0xFF, 0xff}, {0x21, 0x55, 0xFF, 0xff}, {0x82, 0x37, 0xFA, 0xff},
	{0xEB, 0x2F, 0xB5, 0xff}, {0xFF, 0x29, 0x50, 0xff}, {0xFF, 0x22, 0x00, 0xff}, {0xD6, 0x32, 0x00, 0xff}, {0xC4, 0x62, 0x00, 0xff},
	{0x35, 0x80, 0x00, 0xff}, {0x05, 0x8F, 0x00, 0xff}, {0x00, 0x8A, 0x55, 0xff}, {0x00, 0x99, 0xCC, 0xff}, {0x21, 0x21, 0x21, 0xff},
	{0x09, 0x09, 0x09, 0xff}, {0x09, 0x09, 0x09, 0xff}, {0xFF, 0xFF, 0xFF, 0xff}, {0x0F, 0xD7, 0xFF, 0xff}, {0x69, 0xA2, 0xFF, 0xff},
	{0xD4, 0x80, 0xFF, 0xff}, {0xFF, 0x45, 0xF3, 0xff}, {0xFF, 0x61, 0x8B, 0xff}, {0xFF, 0x88, 0x33, 0xff}, {0xFF, 0x9C, 0x12, 0xff},
	{0xFA, 0xBC, 0x20, 0xff}, {0x9F, 0xE3, 0x0E, 0xff}, {0x2B, 0xF0, 0x35, 0xff}, {0x0C, 0xF0, 0xA4, 0xff}, {0x05, 0xFB, 0xFF, 0xff},
	{0x5E, 0x5E, 0x5E, 0xff}, {0x0D, 0x0D, 0x0D, 0xff}, {0x0D, 0x0D, 0x0D, 0xff}, {0xFF, 0xFF, 0xFF, 0xff}, {0xA6, 0xFC, 0xFF, 0xff},
	{0xB3, 0xEC, 0xFF, 0xff}, {0xDA, 0xAB, 0xEB, 0xff}, {0xFF, 0xA8, 0xF9, 0xff}, {0xFF, 0xAB, 0xB3, 0xff}, {0xFF, 0xD2, 0xB0, 0xff},
	{0xFF, 0xEF, 0xA6, 0xff}, {0xFF, 0xF7, 0x9C, 0xff}, {0xD7, 0xE8, 0x95, 0xff}, {0xA6, 0xED, 0xAF, 0xff}, {0xA2, 0xF2, 0xDA, 0xff},
	{0x99, 0xFF, 0xFC, 0xff}, {0xDD, 0xDD, 0xDD, 0xff}, {0x11, 0x11, 0x11, 0xff}, {0x11, 0x11, 0x11, 0xff},
})

func ConvertPalleteToUint32(pallete [NesPalleteSize]sdl.Color) [NesPalleteSize]uint32 {
	newPallete := [NesPalleteSize]uint32{}
	for i, c := range pallete {
		newPallete[i] = c.Uint32()
	}
	return newPallete
}

func GetBackgroundPalette(nes *Nes, tc uint16, tr uint16) [4]uint8 {
	attrIndex := (tr/NesAttributeQuadrantTiles)*NesTileWidth + (tc / NesAttributeQuadrantTiles)
	attrByte := MemoryRead(&nes.PPU.VRAM, NesNametableFirst+NesPointer(attrIndex))
	pc := (tc % NesAttributeQuadrantTiles) / 2
	pr := (tr % NesAttributeQuadrantTiles) / 2
	pi := uint8(0)
	switch pc {
	case 0:
		switch pr {
		case 0:
			pi = attrByte & 0b11
		case 1:
			pi = (attrByte >> 4) & 0b11
		}
	case 1:
		switch pr {
		case 0:
			pi = (attrByte >> 2) & 0b11
		case 1:
			pi = (attrByte >> 6) & 0b11
		}
	}

	start := NesPointer(1 + (pi * NesAttributeQuadrantTiles))
	return [NesAttributeQuadrantTiles]uint8{MemoryRead(&nes.PPU.Pallete, 0), MemoryRead(&nes.PPU.Pallete, start), MemoryRead(&nes.PPU.Pallete, start+1), MemoryRead(&nes.PPU.Pallete, start+2)}
}

func GetSpritePalette(nes *Nes, i uint8) [4]uint8 {
	start := NesPointer(NesSpritePalleteStart + (i * NesAttributeQuadrantTiles))
	return [NesAttributeQuadrantTiles]uint8{0, MemoryRead(&nes.PPU.Pallete, start), MemoryRead(&nes.PPU.Pallete, start+1), MemoryRead(&nes.PPU.Pallete, start+2)}
}
